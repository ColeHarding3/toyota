-- TOYOTA INSTALLER --

if not http then
    print("Sorry, I need access to the internet to download stuff.")
    return
end

local branch = "main"
local maxRetries = 5
local retryDelay = 60

-- The list of files to fetch.
local files = {
    {
        folder = "apis",
        name = "toyota",
        url = "https://github.com/coleharding3/toyota/raw/"..branch.."/apis/toyota",
        minify = true
    },
    {
        folder = "apis",
        name = "toyota-src",
        url = "https://github.com/coleharding3/toyota/raw/"..branch.."/apis/toyota"
    },
    {
        folder = "programs",
        name = "toyota-test",
        url = "https://github.com/coleharding3/toyota/raw/"..branch.."/programs/toyota-test"
    },
    {
        folder = "programs",
        name = "toyota-updater",
        url = "https://github.com/coleharding3/toyota/raw/"..branch.."/programs/toyota-updater"
    }
}

-- Utility function for shrinking the code.
function minify(code)
    local lines = {}
    local inMultilineComment = false
    for line in string.gmatch(code, "[^\n]+") do
        line = line
        :gsub("^%s*(.-)%s*$", "%1")
        :gsub("^%-%-[^%[]*$", "")
        local keep = not inMultilineComment
        if inMultilineComment then
            if line == "]]" then
                inMultilineComment = false
            end
        elseif line:match("^%-%-%[%[") then
            inMultilineComment = true
            keep = false
        end
        if keep and line ~= "" then
            table.insert(lines, line)
        end
    end
    return table.concat(lines, "\n")
end

-- Get the running script's path
local scriptPath = shell.getRunningProgram()

-- Function to fetch a file with retries for toyota
function fetchToyota()
    local path = fs.combine("apis", "toyota")
    local lastVersion = nil
    
    if fs.exists(path) then
        local f = fs.open(path, "r")
        lastVersion = f.readAll()
        f.close()
    end

    for attempt = 1, maxRetries do
        print("Fetching 'toyota' (Attempt " .. attempt .. "/" .. maxRetries .. ")...")
        local request = http.get(files[1].url)
        if request then
            local response = request.getResponseCode()
            if response == 200 then
                local script = request.readAll()
                if files[1].minify then
                    script = minify(script)
                end
                
                if script ~= lastVersion then
                    local f = fs.open(path, "w")
                    f.write(script)
                    f.close()
                    print("Successfully updated 'toyota'.")
                    return true
                else
                    print("No changes detected, retrying in " .. retryDelay .. " seconds...")
                    os.sleep(retryDelay)
                end
            else
                print("Error: Bad HTTP response code " .. response .. ".")
            end
        else
            print("Error: Failed to fetch file.")
        end
    end
    print("Failed to update 'toyota' after " .. maxRetries .. " attempts.")
    return false
end

-- Fetch toyota first before the others
if fetchToyota() then
    for i = 2, #files do
        local file = files[i]
        fs.makeDir(file.folder)
        local path = fs.combine(file.folder, file.name)
        
        print("Fetching '" .. file.name .. "'...")
        local request = http.get(file.url)
        if request then
            local response = request.getResponseCode()
            if response == 200 then
                local script = request.readAll()
                local f = fs.open(path, "w")
                f.write(script)
                f.close()
                print("Done.")
            else
                print("Error: Bad HTTP response code " .. response .. ".")
            end
        else
            print("Error: Failed to fetch file.")
        end
        print()
    end
end

-- Delete the script if it is in the root directory
if scriptPath and not scriptPath:find("/") then
    print("Deleting installer from root...")
    fs.delete(scriptPath)
    print("Deleted installer. If you wish to update TOYOTA, please use the '/programs/toyota-updater' instead.")
end

-- Prevent last key entry to be entered in the shell.
os.sleep(0.1)
